from django.shortcuts import redirect, render

from store.forms import RatingForm
from .models import Artist, Album, Rating, Track
from django.http import HttpResponse
from reportlab.pdfgen import canvas
from django.shortcuts import get_object_or_404
from django.db.models import Q, Avg
from Useradmin.models import MyUser
from Shoppingcart.models import ShoppingCart

from django.contrib.auth.decorators import login_required

#TODO: add shopping cart functionality


def home(request):
    artists = Artist.objects.all()
    albums = Album.objects.all()
    tracks = Track.objects.all()

    context = {"artists": artists, "albums": albums, "tracks": tracks}

    return render(request, "store/home.html", context)


def item_search(request):
    query = request.GET.get("q", "")
    min_rating = request.GET.get("min_rating")
    artists = (
        Artist.objects.filter(Q(name__icontains=query) | Q(bio__icontains=query))
        if query
        else []
    )
    albums = Album.objects.all()

    if query:
        albums = albums.filter(
            Q(title__icontains=query) | Q(artist__name__icontains=query)
        )

    albums = albums.annotate(
        avg_rating=Avg("ratings__value", filter=Q(ratings__is_active=True))
    )

    if min_rating:
        albums = albums.filter(avg_rating_gte=float(min_rating))


    tracks = Track.objects.filter(title__icontains=query) if query else []


    tracks = Track.objects.filter(title__icontains=query) if query else []

    request.session["last_query"] = query

    context = {
        "query": query,
        "artists": artists,
        "albums": albums,
        "tracks": tracks,
        "min_rating": min_rating,
        "ratings": range(1, 6),
    }
    return render(request, "store/artikel_suche.html", context)


def generate_pdf(request):
    entity_type = request.GET.get("type")
    entity_id = request.GET.get("id")

    response = HttpResponse(content_type="application/pdf")
    response["Content-Disposition"] = 'attachment; filename="example.pdf"'

    p = canvas.Canvas(response)  # type: ignore

    p.drawString(100, 800, "Hello, this is a PDF generated by Django!")
    p.drawString(100, 780, "Here are some example data:")

    if entity_type == "artist":
        artist = get_object_or_404(Artist, id=entity_id)
        p.drawString(100, 760, f"Artist: {artist.name}")
        p.drawString(100, 740, f"Genre: {artist.genre}")
    elif entity_type == "album":
        album = get_object_or_404(Album, id=entity_id)
        p.drawString(100, 760, f"Album: {album.title}")
        p.drawString(100, 740, f"Artist: {album.artist.name}")
    elif entity_type == "track":
        track = get_object_or_404(Track, id=entity_id)
        p.drawString(100, 760, f"Track: {track.title}")
        p.drawString(100, 740, f"Album: {track.album.title}")
    else:
        p.drawString(100, 760, "Invalid type provided.")

    # Schlie√üe das PDF
    p.showPage()
    p.save()

    return response


@login_required
def rate_album(request, album_id):
    album = get_object_or_404(Album, id=album_id)

    try:
        rating = Rating.objects.get(user=request.user, album=album)
    except Rating.DoesNotExist:
        rating = None

    query = request.session.get("last_query")

    if request.method == "POST":
        form = RatingForm(request.POST, instance=rating)
        if form.is_valid():
            new_rating = form.save(commit=False)
            new_rating.user = request.user
            new_rating.album = album
            new_rating.save()
            # referer = request.META.get("HTTP_REFERER", "home") # /home/ as fallback
            # return redirect(referer) # doesn't quite work so using redirect to home
            return redirect("home")  # Redirect to home after rating
    else:
        form = RatingForm(instance=rating)

    return render(request, "store/rate_album.html", {"album": album, "form": form})


@login_required
def toggle_rating(request):
    if request.method == "POST":
        album_id = request.POST.get("id")
        action = request.POST.get("action")

        album = get_object_or_404(Album, id=album_id)

        if action == "activate":
            album.ratings_enabled = True
        elif action == "deactivate":
            album.ratings_enabled = False

        album.save()

    return redirect("reviews")


def get_album_info(request, album_id=None):
    if not album_id:
        return redirect("home")  # Redirect to home if no album ID is provided
    album = get_object_or_404(Album, id=album_id)
    user = request.user

    if request.method == "GET":
        context = {"album": album}
        return render(request, "store/album_info.html", context)

    if request.method == "POST":
        ShoppingCart.add_album(user, album)
        return redirect("shopping_cart_show")
